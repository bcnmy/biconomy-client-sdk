import { UserOperationStruct, UserOperationReceipt } from "@alchemy/aa-core";
import { Chain, Hex } from "viem";

export type BundlerConfig = {
  /** The URL of the bundler service */
  bundlerUrl: string;
  /** entryPointAddress: address of the entry point */
  entryPointAddress?: string;
  /** the network id */
  chainId?: number;
  /** The polling interval per chain for the tx receipt in milliseconds. Default value is 5 seconds */
  userOpReceiptIntervals?: { [key in number]?: number };
  /** The polling interval per chain for the tx result in milliseconds. Default value is 0.5 seconds */
  userOpWaitForTxHashIntervals?: { [key in number]?: number };
  /** The maximum duration in milliseconds per chain to wait for the tx receipt. Default value is 30 seconds */
  userOpReceiptMaxDurationIntervals?: { [key in number]?: number };
  /** The maximum duration in milliseconds per chain to wait for the tx hash. Default value is 20 seconds */
  userOpWaitForTxHashMaxDurationIntervals?: { [key in number]?: number };
  /** Can be used to optionally override the chain with a custom chain if it doesn't already exist in viems list of supported chains */
  viemChain?: Chain;
};
export type BundlerConfigWithChainId = BundlerConfig & { chainId: number };

export type UserOpReceipt = {
  /** The request hash of the UserOperation. */
  userOpHash: string;
  /** The entry point address used for the UserOperation. */
  entryPoint: string;
  /** The paymaster used for this UserOperation (or empty). */
  paymaster: string;
  /** The actual amount paid (by account or paymaster) for this UserOperation. */
  actualGasCost: Hex;
  /** The total gas used by this UserOperation (including preVerification, creation, validation, and execution). */
  actualGasUsed: Hex;
  /** Indicates whether the execution completed without reverting. */
  success: "true" | "false";
  /** In case of revert, this is the revert reason. */
  reason: string;
  /** The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle). */
  logs: Array<any>;
  /** The TransactionReceipt object for the entire bundle, not only for this UserOperation. */
  receipt: UserOperationReceipt["receipt"];
};

// review
export type UserOpStatus = {
  state: string; // for now // could be an enum
  transactionHash?: string;
  userOperationReceipt?: UserOpReceipt;
};

/**
 * @description SimulationType
 * "validation_and_execution" is recommended during development for improved debugging & devEx, but will add some additional latency to calls.
 * "validation" can be used in production mode to remove this latency after flows have been tested.
 */
export type SimulationType = "validation" | "validation_and_execution";

// Converted to JsonRpcResponse with strict type
export type GetUserOperationReceiptResponse = {
  /** The JSON-RPC url */
  jsonrpc: string;
  /** Request id */
  id: number;
  result: UserOpReceipt;
  /** The error if the request failed */
  error?: JsonRpcError;
};

export type GetUserOperationStatusResponse = {
  /** The JSON-RPC url */
  jsonrpc: string;
  /** Request id */
  id: number;
  result: UserOpStatus;
  /** The error if the request failed */
  error?: JsonRpcError;
};

// Converted to JsonRpcResponse with strict type
export type SendUserOpResponse = {
  /** The JSON-RPC url */
  jsonrpc: string;
  /** Request id */
  id: number;
  result: string;
  /** The error if the request failed */
  error?: JsonRpcError;
};

export type UserOpResponse = {
  userOpHash: string;
  wait(_confirmations?: number): Promise<UserOpReceipt>;
  // Review: waitForTxHash(): vs waitForTxHash?():
  waitForTxHash(): Promise<UserOpStatus>;
};

// Converted to JsonRpcResponse with strict type
export type EstimateUserOpGasResponse = {
  /** The JSON-RPC url */
  jsonrpc: string;
  /** Request id */
  id: number;
  /** The result of the estimate gas request */
  result: UserOpGasResponse;
  /** The error if the request failed */
  error?: JsonRpcError;
};

export type UserOpGasResponse = {
  /** The amount of gas to pay to compensate the bundler for pre-verification execution and calldata */
  preVerificationGas: string;
  /*The amount of gas to allocate for the verification step. */
  verificationGasLimit: string;
  /** The amount of gas to allocate for the main execution call */
  callGasLimit: string;
  /** Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas) */
  maxPriorityFeePerGas: string;
  /** Maximum fee per gas (similar to EIP-1559 max_fee_per_gas) */
  maxFeePerGas: string;
};

// Converted to JsonRpcResponse with strict type
export type GetUserOpByHashResponse = {
  jsonrpc: string;
  id: number;
  result: UserOpByHashResponse;
  error?: JsonRpcError;
};

export type UserOpByHashResponse = UserOperationStruct & {
  /** The transaction hash of the UserOperation. */
  transactionHash: string;
  /** The block number of the UserOperation. */
  blockNumber: number;
  /** The block hash of the UserOperation. */
  blockHash: string;
  /** The entrypoint used */
  entryPoint: string;
};
/** eslint-disable  @typescript-eslint/no-explicit-any */
export type JsonRpcError = {
  code: string;
  message: string;
  data: any;
};

export type GetGasFeeValuesResponse = {
  jsonrpc: string;
  id: number;
  result: GasFeeValues;
  error?: JsonRpcError;
};
export type GasFeeValues = {
  maxPriorityFeePerGas: string;
  maxFeePerGas: string;
};
